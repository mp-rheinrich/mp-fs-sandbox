#!/usr/bin/python
import optparse
import subprocess
import sys

def get_refs():
    p = subprocess.Popen(
        args=[
            'git',
            'for-each-ref',
            '--format=%(objectname) %(*objectname) %(refname)',
            '--sort=-taggerdate',
            'refs/remotes/origin/',
            'refs/tags/',
            ],
        stdout=subprocess.PIPE,
        close_fds=True,
        )
    (stdout, stderr) = p.communicate()
    # TODO check p.returncode
    assert not stderr
    for line in stdout.splitlines():
        obj, tagobj, ref = line.split(' ', 2)
        if tagobj:
            obj = tagobj
        yield obj, ref

def separate_tags_and_branches(refs):
    tags = []
    branches = []
    for obj, ref in refs:
        if ref.startswith('refs/tags/'):
            tags.append((obj, ref))
        elif ref.startswith('refs/remotes/origin/'):
            branches.append((obj, ref))
        else:
            raise RuntimeError('Bad refname: %r' % ref)
    return tags, branches

PRIORITIZE = [
    'master',
    'next',
    'stable',
    ]

IGNORE = [
    'HEAD',
    ]

IGNORE_PREFIX = [
    'historic/',
    ]

IGNORE_TAGS = [
    'ceph-v0.20.1',
    'v0.1',
    'v0.2',
    'v0.3',
    'v0.4',
    'v0.5',
    'v0.6',
    'v0.7',
    'v0.7.1',
    'v0.7.2',
    'v0.7.3',
    'v0.8',
    'v0.9',
    'v0.10',
    'v0.11',
    'v0.12',
    'v0.13',
    'v0.14',
    'v0.15',
    'v0.16',
    'v0.16.1',
    'v0.17',
    'v0.18',
    'v0.19',
    'v0.19.1',
    'v0.20',
    'v0.20.1',
    'v0.20.2',
    'v0.21',
    'v0.21.1',
    'v0.21.2',
    'v0.21.3',
    'v0.22',
    'v0.22.1',
    'v0.22.2',
    'v0.23',
    'v0.23.1',
    'v0.23.2',
    'v0.24',
    'v0.24.1',
    'v0.24.2',
    'v0.24.3',
    'v0.25',
    'v0.25.1',
    'v0.25.2',
    'v0.26',
    'v0.27',
    'v0.27.1',
    'v0.28',
    'v0.28.1',
    'v0.28.2',
    'v0.29',
    'v0.29.1',
    'v0.30',
    'v0.31',
    'v0.32',
    'v0.33',
    'v0.34',
    'v0.35',
    'v0.36',
    'v0.37',
    'v0.38',
    'v0.39',
    'v0.40',
    'v0.41',
    'v0.42',
    'v0.42.1',
    'v0.42.2',
    'v0.43',
    'v0.44',
    'v0.44.1',
    'v0.44.2',
'ceph-v0.10',
'ceph-v0.11',
'ceph-v0.12',
'ceph-v0.14',
'ceph-v0.15',
'ceph-v0.16',
'ceph-v0.16.1',
'ceph-v0.17',
'ceph-v0.18',
'ceph-v0.19',
'ceph-v0.19.1',
'ceph-v0.5',
'ceph-v0.8',
'foo-3.5',
'reconnect_gen_thing',
'v2.6.11',
'v2.6.11-tree',
'v2.6.12',
'v2.6.12-rc2',
'v2.6.12-rc3',
'v2.6.12-rc4',
'v2.6.12-rc5',
'v2.6.12-rc6',
'v2.6.13',
'v2.6.13-rc1',
'v2.6.13-rc2',
'v2.6.13-rc3',
'v2.6.13-rc4',
'v2.6.13-rc5',
'v2.6.13-rc6',
'v2.6.13-rc7',
'v2.6.14',
'v2.6.14-rc1',
'v2.6.14-rc2',
'v2.6.14-rc3',
'v2.6.14-rc4',
'v2.6.14-rc5',
'v2.6.15',
'v2.6.15-rc1',
'v2.6.15-rc2',
'v2.6.15-rc3',
'v2.6.15-rc4',
'v2.6.15-rc5',
'v2.6.15-rc6',
'v2.6.15-rc7',
'v2.6.16',
'v2.6.16-rc1',
'v2.6.16-rc2',
'v2.6.16-rc3',
'v2.6.16-rc4',
'v2.6.16-rc5',
'v2.6.16-rc6',
'v2.6.17',
'v2.6.17-rc1',
'v2.6.17-rc2',
'v2.6.17-rc3',
'v2.6.17-rc4',
'v2.6.17-rc5',
'v2.6.17-rc6',
'v2.6.18',
'v2.6.18-rc1',
'v2.6.18-rc2',
'v2.6.18-rc3',
'v2.6.18-rc4',
'v2.6.18-rc5',
'v2.6.18-rc6',
'v2.6.18-rc7',
'v2.6.19',
'v2.6.19-rc1',
'v2.6.19-rc2',
'v2.6.19-rc3',
'v2.6.19-rc4',
'v2.6.19-rc5',
'v2.6.19-rc6',
'v2.6.20',
'v2.6.20-rc1',
'v2.6.20-rc2',
'v2.6.20-rc3',
'v2.6.20-rc4',
'v2.6.20-rc5',
'v2.6.20-rc6',
'v2.6.20-rc7',
'v2.6.21',
'v2.6.21-rc1',
'v2.6.21-rc2',
'v2.6.21-rc3',
'v2.6.21-rc4',
'v2.6.21-rc5',
'v2.6.21-rc6',
'v2.6.21-rc7',
'v2.6.22',
'v2.6.22-rc1',
'v2.6.22-rc2',
'v2.6.22-rc3',
'v2.6.22-rc4',
'v2.6.22-rc5',
'v2.6.22-rc6',
'v2.6.22-rc7',
'v2.6.23',
'v2.6.23-rc1',
'v2.6.23-rc2',
'v2.6.23-rc3',
'v2.6.23-rc4',
'v2.6.23-rc5',
'v2.6.23-rc6',
'v2.6.23-rc7',
'v2.6.23-rc8',
'v2.6.23-rc9',
'v2.6.24',
'v2.6.24-rc1',
'v2.6.24-rc2',
'v2.6.24-rc3',
'v2.6.24-rc4',
'v2.6.24-rc5',
'v2.6.24-rc6',
'v2.6.24-rc7',
'v2.6.24-rc8',
'v2.6.25',
'v2.6.25-rc1',
'v2.6.25-rc2',
'v2.6.25-rc3',
'v2.6.25-rc4',
'v2.6.25-rc5',
'v2.6.25-rc6',
'v2.6.25-rc7',
'v2.6.25-rc8',
'v2.6.25-rc9',
'v2.6.26',
'v2.6.26-rc1',
'v2.6.26-rc2',
'v2.6.26-rc3',
'v2.6.26-rc4',
'v2.6.26-rc5',
'v2.6.26-rc6',
'v2.6.26-rc7',
'v2.6.26-rc8',
'v2.6.26-rc9',
'v2.6.27',
'v2.6.27-rc1',
'v2.6.27-rc2',
'v2.6.27-rc3',
'v2.6.27-rc4',
'v2.6.27-rc5',
'v2.6.27-rc6',
'v2.6.27-rc7',
'v2.6.27-rc8',
'v2.6.27-rc9',
'v2.6.28',
'v2.6.28-rc1',
'v2.6.28-rc2',
'v2.6.28-rc3',
'v2.6.28-rc4',
'v2.6.28-rc5',
'v2.6.28-rc6',
'v2.6.28-rc7',
'v2.6.28-rc8',
'v2.6.28-rc9',
'v2.6.29',
'v2.6.29-rc1',
'v2.6.29-rc2',
'v2.6.29-rc3',
'v2.6.29-rc4',
'v2.6.29-rc5',
'v2.6.29-rc6',
'v2.6.29-rc7',
'v2.6.29-rc8',
'v2.6.30',
'v2.6.30-rc1',
'v2.6.30-rc2',
'v2.6.30-rc3',
'v2.6.30-rc4',
'v2.6.30-rc5',
'v2.6.30-rc6',
'v2.6.30-rc7',
'v2.6.30-rc8',
'v2.6.31',
'v2.6.31-rc1',
'v2.6.31-rc2',
'v2.6.31-rc3',
'v2.6.31-rc4',
'v2.6.31-rc5',
'v2.6.31-rc6',
'v2.6.31-rc7',
'v2.6.31-rc8',
'v2.6.31-rc9',
'v2.6.32',
'v2.6.32-rc1',
'v2.6.32-rc2',
'v2.6.32-rc3',
'v2.6.32-rc4',
'v2.6.32-rc5',
'v2.6.32-rc6',
'v2.6.32-rc7',
'v2.6.32-rc8',
'v2.6.33',
'v2.6.33-rc1',
'v2.6.33-rc2',
'v2.6.33-rc3',
'v2.6.33-rc4',
'v2.6.33-rc5',
'v2.6.33-rc6',
'v2.6.33-rc7',
'v2.6.33-rc8',
'v2.6.34',
'v2.6.34-rc1',
'v2.6.34-rc2',
'v2.6.34-rc3',
'v2.6.34-rc4',
'v2.6.34-rc5',
'v2.6.34-rc6',
'v2.6.34-rc7',
'v2.6.35',
'v2.6.35-rc1',
'v2.6.35-rc2',
'v2.6.35-rc3',
'v2.6.35-rc4',
'v2.6.35-rc5',
'v2.6.35-rc6',
'v2.6.36',
'v2.6.36-rc1',
'v2.6.36-rc2',
'v2.6.36-rc3',
'v2.6.36-rc4',
'v2.6.36-rc5',
'v2.6.36-rc6',
'v2.6.36-rc7',
'v2.6.36-rc8',
'v2.6.37',
'v2.6.37-rc1',
'v2.6.37-rc2',
'v2.6.37-rc3',
'v2.6.37-rc4',
'v2.6.37-rc5',
'v2.6.37-rc6',
'v2.6.37-rc7',
'v2.6.37-rc8',
'v2.6.38',
'v2.6.38-rc1',
'v2.6.38-rc2',
'v2.6.38-rc3',
'v2.6.38-rc4',
'v2.6.38-rc5',
'v2.6.38-rc6',
'v2.6.38-rc7',
'v2.6.38-rc8',
'v2.6.39',
'v2.6.39-rc1',
'v2.6.39-rc2',
'v2.6.39-rc3',
'v2.6.39-rc4',
'v2.6.39-rc5',
'v2.6.39-rc6',
'v2.6.39-rc7',
'v3.0',
'v3.0-rc1',
'v3.0-rc2',
'v3.0-rc3',
'v3.0-rc4',
'v3.0-rc5',
'v3.0-rc6',
'v3.0-rc7',
'v3.1',
'v3.1-rc1',
'v3.1-rc10',
'v3.1-rc2',
'v3.1-rc3',
'v3.1-rc4',
'v3.1-rc5',
'v3.1-rc6',
'v3.1-rc7',
'v3.1-rc8',
'v3.1-rc9',
'v3.2',
'v3.2-rc1',
'v3.2-rc2',
'v3.2-rc3',
'v3.2-rc4',
'v3.2-rc5',
'v3.2-rc6',
'v3.2-rc7',
'v3.3',
'v3.3-rc1',
'v3.3-rc2',
'v3.3-rc3',
'v3.3-rc4',
'v3.3-rc5',
'v3.3-rc6',
'v3.3-rc7',
'v3.4',
'v3.4-rc1',
'v3.4-rc2',
'v3.4-rc3',
'v3.4-rc4',
'v3.4-rc5',
'v3.4-rc6',
'v3.4-rc7',
'v3.7',
'v3.7-rc1',
'v3.7-rc2',
'v3.7-rc3',
'v3.7-rc4',
'v3.7-rc5',
'v3.7-rc6',
'v3.7-rc7',
'v3.7-rc8',
'v3.8-rc1',
    ]

def separate_priority_branches(branches):
    prioritize = ['origin/{0}'.format(b) for b in PRIORITIZE]
    ignore = ['origin/{0}'.format(b) for b in IGNORE]
    ignore_prefix = ['origin/{0}'.format(b) for b in IGNORE_PREFIX]

    priority = []
    normal = []

    for obj, ref in branches:
        if ref in prioritize:
            priority.append((obj, ref))
            continue

        if ref in ignore:
            continue

        if any(ref.startswith(prefix) for prefix in ignore_prefix):
            continue

        normal.append((obj, ref))

    # priority lost its ordering, restore it
    priority.sort(key=lambda (obj,ref): prioritize.index(ref))

    return priority, normal

def strip_prefix(refs, prefix):
    for obj, ref in refs:
        assert ref.startswith(prefix)
        ref = ref[len(prefix):]
        yield obj, ref

def filter_tags(ls):
    r = []
    for x in ls:
        (sha1, tag) = x
        if tag not in IGNORE_TAGS:
            r.append(x)
    return r

def doit(output, verbose):
    refs = get_refs()
    tags, branches = separate_tags_and_branches(refs)
    tags = strip_prefix(tags, 'refs/tags/')

    branches = strip_prefix(branches, 'refs/remotes/')
    priority, normal = separate_priority_branches(branches)

    filtered_tags = filter_tags(tags)

    if verbose:
        fmt = '{0} {1}'
    else:
        fmt = '{1}'

    for l in [priority, normal, filtered_tags]:
        for (obj, ref) in l:
            print >>output, fmt.format(obj, ref)

def main():
    parser = optparse.OptionParser(
        usage='%prog [-v]',
        description='Output interesting git tags and branches, for gitbuilder.',
        )
    parser.add_option(
        '-v', '--verbose',
        action='store_true',
        )
    opts, args = parser.parse_args()
    if args:
        parser.error('Unexpected arguments.')

    doit(sys.stdout, opts.verbose)

if __name__ == '__main__':
    main()
